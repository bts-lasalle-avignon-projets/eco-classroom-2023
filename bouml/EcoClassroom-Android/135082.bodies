class EcoClassroom
!!!135082.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        setContentView(R.layout.ecoclassroom);
        Log.d(TAG, "onCreate()");

        initialiserHandler();
        initialiserVueSalles();
        initialiserBaseDeDonnees();
!!!135210.java!!!	onStart() : void
        super.onStart();
        Log.d(TAG, "onStart()");
!!!135338.java!!!	onResume() : void
        super.onResume();
        Log.d(TAG, "onResume()");
        baseDeDonnees.setHandler(handler);
        chargerSalles();
!!!135466.java!!!	onPause() : void
        super.onPause();
        Log.d(TAG, "onPause()");
!!!135594.java!!!	onStop() : void
        super.onStop();
        Log.d(TAG, "onStop()");
!!!135722.java!!!	onDestroy() : void
        super.onDestroy();
        Log.d(TAG, "onDestroy()");
!!!135850.java!!!	initialiserVueSalles() : void
        vueSalles = (RecyclerView)findViewById(R.id.listeSalles);
        vueSalles.setHasFixedSize(true);

        layoutVueSalles = new LinearLayoutManager(this);
        vueSalles.setLayoutManager(layoutVueSalles);
!!!135978.java!!!	afficherSalles(inout salles : Vector<Salle>) : void
        Log.d(TAG, "afficherSalles() Nb salles = " + salles.size());
        /*
        for(int i = 0; i < salles.size(); i++)
        {
            Log.d(TAG, "afficherSalles() salle : nom = " + salles.get(i).getNom());
        }*/
        this.salles = salles;
        if(this.adaptateurSalle == null)
        {
            adaptateurSalle = new AdaptateurSalle(salles);
            vueSalles.setAdapter(adaptateurSalle);
        }
        // Force le rafraichissement de la liste des salles
        this.adaptateurSalle.notifyDataSetChanged();
!!!136106.java!!!	ajouterSalle(in nom : String, in description : String, in superficie : double) : void
        salles.add(new Salle(nom, superficie, description));
!!!136234.java!!!	chargerSalles() : void
        Log.d(TAG, "chargerSalles()");
        baseDeDonnees.chargerSalles();
!!!148394.java!!!	initialiserBaseDeDonnees() : void
        baseDeDonnees = BaseDeDonnees.getInstance(handler);
!!!148522.java!!!	initialiserHandler() : void
        this.handler = new Handler(this.getMainLooper()) {
            @Override
            public void handleMessage(@NonNull Message message)
            {
                Log.d(TAG, "[Handler] id message = " + message.what);
                Log.d(TAG, "[Handler] message = " + message.obj.toString());

                switch(message.what)
                {
                    case BaseDeDonnees.CONNEXION_OK:
                        Log.d(TAG, "[Handler] CONNEXION_OK");
                        break;
                    case BaseDeDonnees.CONNEXION_ERREUR:
                        Log.d(TAG, "[Handler] CONNEXION_ERREUR");
                        break;
                    case BaseDeDonnees.DECONNEXION_OK:
                        Log.d(TAG, "[Handler] DECONNEXION_OK");
                        break;
                    case BaseDeDonnees.DECONNEXION_ERREUR:
                        Log.d(TAG, "[Handler] DECONNEXION_ERREUR");
                        break;
                    case BaseDeDonnees.REQUETE_SQL_OK:
                        Log.d(TAG, "[Handler] REQUETE_SQL_OK");
                        break;
                    case BaseDeDonnees.REQUETE_SQL_ERREUR:
                        Log.d(TAG, "[Handler] REQUETE_SQL_ERREUR");
                        break;
                    case BaseDeDonnees.REQUETE_SQL_SELECT_SALLES:
                        Log.d(TAG, "[Handler] REQUETE_SQL_SELECT_SALLES");
                        afficherSalles((Vector<Salle>)message.obj);
                        alerterDepassementSeuil();
                }
            }
        };
!!!148650.java!!!	alerterDepassementSeuil() : void
        for(int i = 0; i < salles.size(); i++)
        {
            Log.d(TAG, "alerterDepassementSeuil() salle : " + salles.get(i).getNom());
            Salle salle = salles.get(i);
            if(salle.getTemperature() < salle.getSeuils().getTemperatureMin() ||
               salle.getTemperature() > salle.getSeuils().getTemperatureMax())
            {
                notifierDepassement(salle, DEPASSEMENT_TEMPERATURE);
            }
            if(salle.getHumidite() < salle.getSeuils().getHumiditeMin() ||
               salle.getHumidite() > salle.getSeuils().getHumiditeMax())
            {
                notifierDepassement(salle, DEPASSEMENT_HUMIDITE);
            }
            if(salle.getCo2() >= salle.getSeuils().getCo2Max())
            {
                notifierDepassement(salle, DEPASSEMENT_CO2);
            }
        }
!!!148778.java!!!	notifierDepassement(inout salle : Salle, in typeDepassement : int) : void
        Log.d(TAG,
              "alerterDepassementSeuil() salle : " + salle.getNom() + " -> " + typeDepassement);
        String titre   = "Dépassement de seuil : " + salle.getNom();
        String message = "";

        switch(typeDepassement)
        {
            case DEPASSEMENT_TEMPERATURE:
                message = "Température";
                break;
            case DEPASSEMENT_HUMIDITE:
                message = "Humidité";
                break;
            case DEPASSEMENT_CO2:
                message = "CO2";
                break;
            default:
                return;
        }

        // cf. https://developer.android.com/develop/ui/views/notifications/build-notification#java
        NotificationCompat.Builder notification =
          new NotificationCompat.Builder(this, "ecoChannelID")
            .setSmallIcon(R.drawable.ic_launcher_background)
            .setContentTitle(titre)
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_DEFAULT);

        // Si API26
        if(android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O)
        {
            CharSequence        name        = getString(R.string.app_name);
            String              description = "Notification EcoClassroom";
            int                 importance  = NotificationManager.IMPORTANCE_DEFAULT;
            NotificationChannel channel = new NotificationChannel("EcoClassroom", name, importance);
            channel.setDescription(description);
            // notificationManager =
            // (NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
            notificationManager = (NotificationManager)getSystemService(NotificationManager.class);
            notificationManager.createNotificationChannel(channel);
        }
        Intent intent = new Intent(this, EcoClassroom.class);
        // intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        PendingIntent pendingIntent =
          PendingIntent.getActivity(this,
                                    0,
                                    new Intent(this, EcoClassroom.class),
                                    PendingIntent.FLAG_UPDATE_CURRENT);
        // PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, new Intent(this,
        // EcoClassroom.class), PendingIntent.FLAG_IMMUTABLE);
        // notification.setContentIntent(pendingIntent);
        notification.setFullScreenIntent(pendingIntent, true);
        notification.setAutoCancel(true);
        // Si API26
        if(android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O)
        {
            notificationManager.notify(idNotification++, notification.build());
        }
        else
        {
            NotificationManagerCompat.from(this).notify(idNotification++, notification.build());
            //NotificationManagerCompat.from(this).notify(typeDepassement, notification.build());
        }

        Toast toast =
          Toast.makeText(getApplicationContext(),
                         "Salle " + salle.getNom() + " : dépassement de seuil " + message,
                         Toast.LENGTH_SHORT);
        toast.show();
